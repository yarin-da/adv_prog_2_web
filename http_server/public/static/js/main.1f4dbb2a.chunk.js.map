{"version":3,"sources":["components/HttpRequestHandler.js","components/DataTable.js","components/SearchBar.js","components/ModelList.js","components/AnomalyList.js","components/FileDropzone.js","components/CsvDropzone.js","components/Graph.js","components/MainPage.js","App.js","index.js"],"names":["server","httpGETModels","a","fetch","response","ok","json","httpGETModel","model_id","httpPOSTModel","model_type","data","method","headers","body","JSON","stringify","train_data","httpDELETEModel","httpPOSTAnomalies","predict_data","flightDataToServerData","flightData","length","serverData","columns","Object","keys","forEach","col","i","HttpRequestHandler","getModels","func","getModel","postModel","convertedData","deleteModel","postAnomalies","useStyles","makeStyles","theme","root","borderColor","outline","backgroundColor","darken","palette","error","main","lighten","DataTable","anomalies","anomalyPair","rows","useMemo","map","line","index","id","header","field","headerName","sortable","width","useState","Set","anomalyLines","setAnomalyLines","useEffect","filter","key","lines","span","add","classes","style","padding","className","disableSelectionOnClick","disableColumnMenu","getRowClassName","params","rowID","row","has","pageSize","SearchBar","onSearchChanged","label","TextField","color","variant","size","onChange","event","target","value","fullWidth","InputProps","endAdornment","InputAdornment","position","defaultProps","e","listStyle","SelectList","models","selectedModel","onModelSelected","onDeleteItem","search","setSearch","list","model","upload_time","status","includes","height","itemSize","itemCount","isSelected","time","splitTime","split","date","hour","parseTime","ListItem","button","selected","onClick","ListItemIcon","ListItemText","primary","secondary","IconButton","Divider","light","item","fontSize","AnomalyList","selectedAnomalyPair","onAnomalyPairSelected","reason","feature","str","isItemSelected","feature1","feature2","listitem","onItemClicked","ListItemAvatar","baseStyle","flex","display","flexDirection","alignItems","borderWidth","borderRadius","borderStyle","transition","activeStyle","acceptStyle","rejectStyle","FileDropzone","text","type","onFileChosen","useDropzone","accept","maxFiles","onDrop","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","margin","Typography","CsvDropzone","onDataChanged","onFileLoad","useCallback","acceptedFiles","file","reader","FileReader","onload","parsed","csvData","trim","slice","newLine","cols","val","parseLine","parseCsvToJson","result","readAsText","chartOptions","responsive","maintainAspectRatio","plugins","legend","labels","scales","x","ticks","title","y","colors","r","g","b","Graph","skip","ctx","spans","start","end","p0","nextProps","nextState","this","props","graphUpdates","missingData","max","Math","min","trunc","chartLabels","labelValue","push","datasets","getColor","yValues","radius","pointHitRadius","segment","isAnomalySegment","isAnomaly","undefined","chartData","createChartData","options","React","Component","createMuiTheme","dark","textPrimary","disabled","MainPage","setSelectedModel","detectData","setDetectData","setTrainData","modelType","setModelType","setSelectedAnomalyPair","ThemeProvider","border","ModelList","Button","App","setModels","setAnomalies","trainData","setGraphUpdates","modelsRef","useRef","current","updateModels","jsonData","every","oldState","interval","setInterval","clearInterval","find","updates","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f4dbb2a.chunk.js","sourcesContent":["/* inner implementation */\r\nconst server = 'http://localhost:9876';\r\n\r\n// wrap each http request with an async function\r\n// return the server's json response (if exists)\r\n// return null if there was an error\r\n\r\nconst httpGETModels = async () => {\r\n  const response = await fetch(`${server}/api/models`);\r\n  if (response.ok) {\r\n    const json = await response.json();\r\n    return json;\r\n  }\r\n  return null;\r\n}\r\n\r\nconst httpGETModel = async (model_id) => {\r\n  const response = await fetch(`${server}/api/model?model_id=${model_id}`);\r\n  if (response.ok) {\r\n    const json = await response.json();\r\n    return json;\r\n  }\r\n  return null;\r\n}\r\n\r\nconst httpPOSTModel = async (model_type, data) => {\r\n  const response = await fetch(\r\n      `${server}/api/model?model_type=${model_type}`, \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({train_data: data}),\r\n      }\r\n  );\r\n  if (response.ok) {\r\n    const json = await response.json();\r\n    return json;\r\n  }\r\n  return null;\r\n}\r\n\r\nconst httpDELETEModel = async (model_id) => {\r\n  const response = await fetch(\r\n      `${server}/api/model?model_id=${model_id}`, \r\n      {\r\n          method: 'DELETE',\r\n      }\r\n  );\r\n  return response.ok;\r\n}\r\n\r\nconst httpPOSTAnomalies = async (model_id, data) => {\r\n  const response = await fetch(\r\n      `${server}/api/anomaly?model_id=${model_id}`, \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({predict_data: data}),\r\n      }\r\n  );\r\n  if (response.ok) {\r\n    const json = await response.json();\r\n    return json;\r\n  }\r\n  return null;\r\n}\r\n\r\n/* data converters */\r\nconst flightDataToServerData = (flightData) => {\r\n  // return if there's no data\r\n  if (flightData == null || flightData.length <= 0 || flightData[0] == null) { \r\n    return; \r\n  }\r\n  // initialize a new json object \r\n  const serverData = {};\r\n  // initialize keys\r\n  const columns = Object.keys(flightData[0]);\r\n  columns.forEach((col) => {\r\n    serverData[col] = [];\r\n  });\r\n  // initialize arrays for each key (column)\r\n  for (let i = 0; i < flightData.length; i++) {\r\n    columns.forEach((col) => {\r\n      serverData[col] = [...serverData[col], flightData[i][col]];\r\n    });\r\n  }\r\n  return serverData;\r\n}\r\n\r\n\r\n/* async http calls wrappers */\r\nconst getModels = async (func) => {\r\n  const json = await httpGETModels();\r\n  if (json != null) {\r\n    func(json);\r\n  }\r\n};\r\n\r\nconst getModel = async (model_id, func) => {\r\n  const json = await httpGETModel(model_id);\r\n  if (json != null) {\r\n    func(json);\r\n  }\r\n};\r\n\r\nconst postModel = async (model_id, data, func) => {\r\n  const convertedData = flightDataToServerData(data);\r\n  const json = await httpPOSTModel(model_id, convertedData);\r\n  if (json != null) {\r\n    func(json);\r\n  }\r\n};\r\n\r\nconst deleteModel = async (model_id) => {\r\n  await httpDELETEModel(model_id);\r\n};\r\n\r\nconst postAnomalies = async (model_id, data, func) => {\r\n  const convertedData = flightDataToServerData(data);\r\n  const json = await httpPOSTAnomalies(model_id, convertedData);\r\n  if (json != null) {\r\n    func(json);\r\n  }\r\n};\r\n\r\n/* server communication interface */\r\nconst HttpRequestHandler = {\r\n  getModels: getModels,\r\n  getModel: getModel,\r\n  postModel: postModel,\r\n  deleteModel: deleteModel,\r\n  postAnomalies: postAnomalies,\r\n}\r\nexport default HttpRequestHandler;","import { useMemo, useEffect, useState } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { makeStyles, darken, lighten } from '@material-ui/core/styles';\r\n\r\n// override default styles\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {\r\n      borderColor: '#6c6c6c',\r\n      '& .MuiDataGrid-cell:focus-within': {\r\n        outline: 'none',\r\n      },\r\n      // a special style for anomaly rows (marked as red)\r\n      '& .anomalyRow': {\r\n        backgroundColor: darken(theme.palette.error.main, 0.5),\r\n        '&:hover': {\r\n          backgroundColor: darken(theme.palette.error.main, 0.25),\r\n        },\r\n      },\r\n      // override hover color for regular lines\r\n      '& .MuiDataGrid-row': {\r\n        '&:hover': {\r\n          backgroundColor: lighten('#0a1a2a', 0.1),\r\n        },\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\n// a data table for all the values in 'data'\r\nconst DataTable = ({data, anomalies, anomalyPair}) => {\r\n  // update columns and rows whenever 'data' updates\r\n  const rows = useMemo(\r\n    // add a unique id for each row\r\n    () => data.map((line, index) => { return {id: index, ...line}; }), \r\n    [data]\r\n  );\r\n  const columns = useMemo(\r\n    () => {\r\n      // make sure there's data\r\n      if (data == null || data[0] == null) { return [] }\r\n      // run through the keys to initialize all columns with default values\r\n      return Object.keys(data[0]).map(\r\n        (header) => {\r\n          return {\r\n            field: header,\r\n            headerName: header,\r\n            sortable: false,\r\n            width: 120,\r\n          }\r\n        }\r\n      );\r\n    }, \r\n    [data]\r\n  );\r\n  \r\n  const [anomalyLines, setAnomalyLines] = useState(new Set());\r\n  useEffect(\r\n    () => {\r\n      if (anomalies == null) { return; }\r\n      // get the columns of features that contain anomalies\r\n      const columns = Object\r\n        .keys(anomalies.anomalies)\r\n        .filter((key) => \r\n          anomalyPair == null || \r\n          anomalyPair.length < 2 || \r\n          key === anomalyPair[0] || \r\n          key === anomalyPair[1]);\r\n\r\n      // save all lines that contain anomalies\r\n      const lines = new Set();\r\n      columns.forEach((col) => {\r\n        anomalies.anomalies[col].forEach((span) => {\r\n          for (var i = span[0]; i < span[1]; i++) {\r\n            lines.add(i);\r\n          }\r\n        });\r\n      });\r\n      setAnomalyLines(lines);\r\n    }, \r\n    [anomalies, anomalyPair]\r\n  );\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div style={{padding: 10}}>\r\n      <DataGrid \r\n        rows={rows} \r\n        columns={columns}\r\n        className={classes.root}\r\n        disableSelectionOnClick={true}\r\n        disableColumnMenu={true}\r\n        getRowClassName={\r\n          (params) => {\r\n            const rowID = params.row.id;\r\n            const exists = anomalyLines.has(rowID);\r\n            return exists ? 'anomalyRow' : 'regularRow';\r\n          }\r\n        }\r\n        pageSize={100} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default DataTable;","import TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst SearchBar = ({onSearchChanged, label}) => {\r\n  return (\r\n    <TextField \r\n      color='secondary'\r\n      variant='filled' \r\n      size='small'\r\n      style={{backgroundColor: 'black'}}\r\n      onChange={(event) => onSearchChanged(event.target.value)}\r\n      label={label}\r\n      fullWidth\r\n      InputProps={\r\n        {\r\n          endAdornment: (\r\n            <InputAdornment position='end'>\r\n              <SearchIcon/>\r\n            </InputAdornment>\r\n          ),\r\n        }\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\n// by default - do nothing when search text is changed\r\nSearchBar.defaultProps = {\r\n  label: 'Search',\r\n  onSearchChanged: (e) => {},\r\n};\r\n\r\nexport default SearchBar;","import { useState, useMemo } from 'react';\r\nimport { FixedSizeList } from 'react-window';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchBar from './SearchBar';\r\n\r\nconst listStyle = {\r\n  backgroundColor: '#071727', \r\n  color: '#fff',\r\n}\r\n\r\nconst SelectList = ({models, selectedModel, onModelSelected, onDeleteItem}) => {\r\n  const [search, setSearch] = useState('');\r\n  const onSearchChanged = (search) => {\r\n    setSearch(search);\r\n  }\r\n\r\n  // update and cache the model list entries\r\n  const list = useMemo(() => {\r\n    if (!search) {\r\n      return models;\r\n    }\r\n    // filter list by search\r\n    const filtered = models.filter((model) => {\r\n      return `id=${model.model_id} ${model.upload_time} ${model.status}`.includes(search);\r\n    });\r\n    return filtered;\r\n  }, [search, models]);\r\n\r\n  const parseTime = (time) => {\r\n    const splitTime = time.split('T');\r\n    return {date: splitTime[0], hour: splitTime[1].split('+')[0]};\r\n  };\r\n\r\n  const getTitle = (id) => {\r\n    const type = (id % 2 === 0) ? 'Linear' : 'Hybrid';\r\n    return `${type} ${id}`;\r\n  }\r\n\r\n  const renderRow = ({index, style}) => {\r\n    const model = list[index];\r\n    const isSelected = (selectedModel != null && selectedModel.model_id === model.model_id);\r\n    const {date, hour} = parseTime(model.upload_time);\r\n    return (\r\n      <>\r\n        <ListItem \r\n            button \r\n            selected={isSelected}\r\n            onClick={(event) => onModelSelected(model)}\r\n            style={style} \r\n            key={index}>\r\n          <ListItemIcon>\r\n            { // model status icon\r\n              model.status === 'pending' ?\r\n              <HourglassEmptyIcon />\r\n              : <CheckCircleIcon style={{color: 'lightgreen'}} />\r\n            }\r\n          </ListItemIcon>\r\n          <ListItemText \r\n            primary={getTitle(model.model_id)} \r\n            secondary={`${date} ${hour}`} />\r\n          <IconButton\r\n            onClick={() => onDeleteItem(model.model_id)}>\r\n            <DeleteIcon style={{color: 'lightslategray'}} />\r\n          </IconButton>\r\n        </ListItem>\r\n        <Divider light />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar \r\n        label='Model List'\r\n        onSearchChanged={onSearchChanged} />\r\n      <FixedSizeList \r\n        style={listStyle}\r\n        height={285} \r\n        itemSize={70} \r\n        itemCount={list.length}>\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectList;","import { useState, useMemo } from 'react';\r\nimport { FixedSizeList } from 'react-window';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport SearchBar from './SearchBar';\r\n\r\n// override default font size\r\nconst useStyles = makeStyles({\r\n  item: {\r\n    '& span, & svg': {\r\n      fontSize: '0.9rem'\r\n    }\r\n  },\r\n});\r\n\r\n// set list colors\r\nconst listStyle = {\r\n  backgroundColor: '#071727', \r\n  color: '#fff',\r\n};\r\n\r\nconst AnomalyList = ({anomalies, selectedAnomalyPair, onAnomalyPairSelected}) => {\r\n  const classes = useStyles();\r\n  const [search, setSearch] = useState('');\r\n  const onSearchChanged = (search) => {\r\n    setSearch(search);\r\n  }\r\n\r\n  // create the list of entries and cache it\r\n  const list = useMemo(\r\n    () => {\r\n      if (anomalies == null) { return []; }\r\n      const reasons = Object.keys(anomalies.reason);\r\n      // filter by search\r\n      const filtered = reasons.filter((feature) => {\r\n        const str = `${feature} - ${anomalies.reason[feature]}`;\r\n        return !search || str.includes(search);\r\n      });\r\n      return filtered;\r\n    }, \r\n    [search, anomalies]\r\n  );\r\n\r\n  const isItemSelected = (feature) => {\r\n    if (selectedAnomalyPair.length <= 0) return false;\r\n    return feature === selectedAnomalyPair[0];\r\n  };\r\n\r\n  const onItemClicked = (feature1, feature2) => {\r\n    if (isItemSelected(feature1)) {\r\n      // if the entry is already selected - unselect it!\r\n      onAnomalyPairSelected([]);\r\n    } else {\r\n      onAnomalyPairSelected([feature1, feature2]);\r\n    }\r\n  };\r\n\r\n  // draw an entry in the list\r\n  const renderRow = ({index}) => {\r\n    const feature1 = list[index];\r\n    const feature2 = anomalies.reason[feature1];\r\n    return (\r\n      <>\r\n        <ListItem \r\n          button \r\n          key={index}\r\n          classes={classes.listitem}\r\n          selected={isItemSelected(feature1)}\r\n          onClick={() => onItemClicked(feature1, feature2)}\r\n        >\r\n          <ListItemAvatar>\r\n              <ErrorIcon style={{color: 'lightcoral'}} />\r\n          </ListItemAvatar>\r\n          <ListItemText\r\n            className={classes.item}\r\n            primary={feature1}\r\n            secondary={feature2}\r\n          />\r\n        </ListItem>\r\n        <Divider light />\r\n      </>\r\n    );\r\n  };\r\n\r\n  // draw the list\r\n  return (\r\n    <div>\r\n      <SearchBar \r\n        label='Anomaly List'\r\n        onSearchChanged={onSearchChanged}\r\n      />\r\n      <FixedSizeList \r\n        style={listStyle}\r\n        height={265} \r\n        itemSize={50} \r\n        itemCount={list.length}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnomalyList;","import { Typography } from '@material-ui/core';\r\nimport { useMemo } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  padding: '25px',\r\n  borderWidth: 0,\r\n  borderRadius: 5,\r\n  borderStyle: 'solid',\r\n  backgroundColor: '#acacac',\r\n  color: '#555555',\r\n  outline: 'none',\r\n  transition: 'border .24s ease-in-out',\r\n};\r\n\r\n// change styles based on drag status\r\nconst activeStyle = {\r\n  backgroundColor: 'lightgray',\r\n  color: 'black',\r\n};\r\n\r\nconst acceptStyle = {\r\n  backgroundColor: 'lightgreen',\r\n  color: 'black',\r\n};\r\n\r\nconst rejectStyle = {\r\n  backgroundColor: 'lightcoral',\r\n  color: 'black',\r\n};\r\n\r\nconst FileDropzone = ({text, type, onFileChosen}) => {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: type, maxFiles: 1, onDrop: onFileChosen});\r\n\r\n  const style = useMemo(() => ({\r\n    ...baseStyle,\r\n    ...(isDragActive ? activeStyle : {}),\r\n    ...(isDragAccept ? acceptStyle : {}),\r\n    ...(isDragReject ? rejectStyle : {}),\r\n  }), [\r\n    isDragActive,\r\n    isDragReject,\r\n    isDragAccept\r\n  ]);\r\n\r\n  // draw the dropzone - make text unselectable\r\n  return (\r\n    <div className=\"Unselectable\" style={{margin: 3}}>\r\n      <div {...getRootProps({style})}>\r\n        <input {...getInputProps()} />\r\n        <Typography\r\n          style={{padding: 10}}>\r\n          {text}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileDropzone;","import { useCallback } from 'react';\r\nimport FileDropzone from './FileDropzone';\r\n\r\n// parse a comma-separated string to a line json \r\nconst parseLine = (line, headers) => {\r\n  let newLine = {};\r\n  const cols = line.trim().split(',');\r\n  headers.forEach((val, index) => {\r\n    newLine[val] = cols[index];\r\n  });\r\n  return newLine;\r\n};\r\n\r\n// parse a whole csv file into a array of line jsons\r\nconst parseCsvToJson = (csvData) => {\r\n  if (csvData == null) { return []; }\r\n  const lines = csvData.trim().split('\\n');\r\n\r\n  if (csvData.length <= 0) { return []; }\r\n  const keys = lines[0].trim().split(',');\r\n  \r\n  // get rid of the column titles (first line in the array)\r\n  const strippedHeaders = lines.slice(1, lines.length - 1);\r\n  const parsed = strippedHeaders.map(\r\n    (line) => parseLine(line, keys)\r\n  );\r\n  return parsed;\r\n};\r\n\r\n// a wrapper for FileDropzone\r\n// loads only csv files and parses them to json\r\nconst CsvDropzone = ({text, onDataChanged}) => {\r\n  const csvType = '.csv, application/vnd.ms-excel, text/csv';\r\n  \r\n  const onFileLoad = useCallback(\r\n    (acceptedFiles) => {\r\n      if (acceptedFiles.length <= 0) { return; }\r\n      const file = acceptedFiles[0];\r\n      // use a reader to read the file's data and parse it to json\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const contents = reader.result;\r\n        const parsed = parseCsvToJson(contents);\r\n        // notify the external component that a file has been uploaded\r\n        onDataChanged(parsed);\r\n      }\r\n      reader.readAsText(file);\r\n    },\r\n    [onDataChanged]\r\n  );\r\n\r\n  return (\r\n    <FileDropzone \r\n      text={text} \r\n      type={csvType} \r\n      onFileChosen={onFileLoad}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CsvDropzone;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst MAX_X_LABELS = 150;\r\n\r\nconst chartOptions = {\r\n  responsive: true, \r\n  maintainAspectRatio: false,\r\n  plugins: {\r\n    legend: {\r\n      labels: {\r\n        // legend text colors\r\n        color: 'aliceblue',\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    x: {\r\n      ticks: {\r\n        color: 'aliceblue',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'timesteps',\r\n        color: 'aliceblue',\r\n      }\r\n    },\r\n    y: {\r\n      ticks: {\r\n        color: 'aliceblue',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n// default linechart colors\r\nconst colors = [\r\n  {r: 0, g: 150, b: 190},\r\n  {r: 110, g: 85,  b: 150},\r\n  {r: 135, g: 180, b: 120},\r\n  {r: 185, g: 185, b: 100},\r\n  {r: 185, g: 130, b: 0},\r\n];\r\n\r\nclass Graph extends React.Component {\r\n  getColor(index) {\r\n    const color = colors[index % colors.length];\r\n    return `rgba(${color.r}, ${color.g}, ${color.b}, 1)`;\r\n  }\r\n\r\n  missingData(data, anomalies) {\r\n    return data == null || data[0] == null || anomalies == null;\r\n  }\r\n\r\n  // figure out if ctx is inside an anomaly segment\r\n  isAnomaly(anomalies, feature, skip, ctx) {\r\n    const spans = anomalies.anomalies[feature];\r\n    if (spans == null) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < spans.length; i++) {\r\n      const start = spans[i][0] / skip;\r\n      const end = spans[i][1] / skip;\r\n      const x = ctx.p0.parsed.x\r\n      if (start <= x && x <= end) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // re-render the graph only when graphUpdates has been changed\r\n  // this is a way to avoid unnecessary re-renders\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const oldUpdates = this.props.graphUpdates;\r\n    const newUpdates = nextProps.graphUpdates;\r\n    return oldUpdates !== newUpdates;\r\n  }\r\n\r\n  createChartData(data, anomalyPair, anomalies) {\r\n    if (this.missingData(data, anomalies)) {\r\n      return {};\r\n    }\r\n    // handle value skipping\r\n    // because we want to display a max value of points \r\n    const max = Math.min(MAX_X_LABELS, data.length);\r\n    const skip = Math.trunc(data.length / max);\r\n    // init labels (i.e. x-axis values)\r\n    const chartLabels = [];\r\n    let labelValue = 0;\r\n    for (let i = 0; i < max; i++) {\r\n      chartLabels.push(labelValue);\r\n      labelValue += skip;\r\n    }\r\n\r\n    // init y-values for each column\r\n    // use filter to skip some of the values\r\n    // and map to grab the relevant value from each row\r\n    const keys = Object.keys(data[0]);\r\n    const filtered = keys\r\n    .filter((col, i) => {\r\n      const maxColsToDisplay = 5;\r\n      return anomalyPair.length > 0 ? anomalyPair.includes(col)\r\n        : 0 < i && i <= Math.min(keys.length - 1, maxColsToDisplay);\r\n    });\r\n    const datasets = filtered.map((header, index) => {\r\n      const color = this.getColor(index);\r\n      // filter some of the rows by skip\r\n      // and get the relevant column values\r\n      const yValues = data\r\n        .filter((row, i) => i % skip === 0)\r\n        .map(row => row[header]);\r\n      return {\r\n        label: header,\r\n        data: yValues,\r\n        borderColor: color,\r\n        radius: 0,\r\n        pointHitRadius: 15,\r\n        // mark an anomaly segment as red\r\n        segment: {\r\n          borderColor: (ctx) => {\r\n            const anomalyColor = 'rgb(200, 70, 70)';\r\n            const isAnomalySegment = this.isAnomaly(anomalies, anomalyPair[0], skip, ctx);\r\n            return anomalyPair != null && isAnomalySegment ? anomalyColor : undefined;\r\n          }\r\n        },\r\n      };\r\n    });\r\n\r\n    // create the actual chart data\r\n    const chartData = {\r\n      labels: chartLabels,\r\n      datasets: datasets,\r\n    };\r\n\r\n    return chartData;\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n    const anomalyPair = this.props.anomalyPair;\r\n    const anomalies = this.props.anomalies;\r\n    const chartData = this.createChartData(data, anomalyPair, anomalies)\r\n\r\n    return (\r\n      <div className='GraphPanel'>\r\n        <Line options={chartOptions} data={chartData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;","import DataTable from './DataTable';\r\nimport ModelList from './ModelList';\r\nimport AnomalyList from './AnomalyList';\r\nimport CsvDropzone from './CsvDropzone';\r\nimport Graph from './Graph';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\r\n\r\n// override default colors\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    secondary: {\r\n      light: '#4fb3bf',\r\n      main: '#00838f',\r\n      dark: '#005662',\r\n      textPrimary: '#ffffff',\r\n    },\r\n    primary: {\r\n      light: '#324053',\r\n      main: '#0a1a2a',\r\n      dark: '#000000',\r\n      textPrimary: '#ffffff',\r\n    },\r\n    text: {\r\n      main: '#ffffff',\r\n      primary: '#ffffff',\r\n      secondary: '#9a9a9a',\r\n      disabled: '#6c6c6c'\r\n    },\r\n  }\r\n});\r\n\r\n// grab all states from the main component via props\r\nconst MainPage = ({\r\n  models,\r\n  selectedModel, setSelectedModel,\r\n  anomalies,\r\n  detectData, setDetectData,\r\n  setTrainData,\r\n  modelType, setModelType,\r\n  graphUpdates,\r\n  selectedAnomalyPair, setSelectedAnomalyPair,\r\n  deleteModel,\r\n}) => {\r\n  \r\n  // draw the whole main page\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className='MainPage'>\r\n        <div>\r\n          <div style={{margin: 10, border: 'solid 2px #324053', borderRadius: 4}}>\r\n            <AnomalyList \r\n              anomalies={anomalies}\r\n              selectedAnomalyPair={selectedAnomalyPair}\r\n              onAnomalyPairSelected={setSelectedAnomalyPair} \r\n            />\r\n            <CsvDropzone \r\n              onDataChanged={setDetectData}\r\n              text='Drop a flight data file' \r\n            />\r\n          </div>\r\n          <div style={{margin: 10, border: 'solid 2px #324053', borderRadius: 4}}>\r\n            <ModelList \r\n              models={models}\r\n              selectedModel={selectedModel}\r\n              onModelSelected={setSelectedModel}\r\n              onDeleteItem={deleteModel}\r\n            />\r\n            <CsvDropzone \r\n              onDataChanged={setTrainData}\r\n              text='Drop a training data file'\r\n            />\r\n            <div style={{margin: 2}}>\r\n              <Button\r\n                fullWidth\r\n                color='secondary'\r\n                variant={modelType === 'regression' ? 'contained' : 'outlined'}\r\n                onClick={() => setModelType('regression')}\r\n              >\r\n                Regression\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                color='secondary'\r\n                variant={modelType === 'hybrid' ? 'contained' : 'outlined'}\r\n                onClick={() => setModelType('hybrid')}\r\n              >\r\n                Hybrid\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='DataPanel'>\r\n          <>\r\n            <Graph \r\n              data={detectData} \r\n              anomalyPair={selectedAnomalyPair}\r\n              anomalies={anomalies} \r\n              graphUpdates={graphUpdates}\r\n            />\r\n            <DataTable \r\n              data={detectData}\r\n              anomalyPair={selectedAnomalyPair}\r\n              anomalies={anomalies} \r\n            />\r\n          </> \r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useEffect, useCallback, useState, useRef } from 'react';\nimport HttpRequestHandler from './components/HttpRequestHandler';\nimport MainPage from './components/MainPage';\n\nconst App = () => {\n  const [models, setModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null); // selected model id\n  const [anomalies, setAnomalies] = useState(null);\n  const [detectData, setDetectData] = useState([]); // flight data to test for anomalies\n  const [trainData, setTrainData] = useState([]); // training data \n  const [modelType, setModelType] = useState('regression'); // user's desired model type\n  const [graphUpdates, setGraphUpdates] = useState(0);\n  const [selectedAnomalyPair, setSelectedAnomalyPair] = useState([]);\n  // used to avoid dependency on models state\n  const modelsRef = useRef();\n  modelsRef.current = models;\n  \n  const deleteModel = (id) => {\n    // delete on server side\n    HttpRequestHandler.deleteModel(id);\n    // delete on client side for immediate feedback\n    setModels(models.filter((model) => model.model_id !== id));\n  };\n  \n  const updateModels = useCallback(\n    () => {\n      // a predicate\n      function shouldUpdate(a, b) {\n        return a.length !== b.length ||\n        !a.every((val, i) => Object.keys(val).every(col => val[col] === b[i][col]));\n      }\n      // request all models from the server\n      // update only when necessary\n      HttpRequestHandler.getModels(\n        (jsonData) => {\n          if (shouldUpdate(jsonData, modelsRef.current)) {\n            setModels(oldState => jsonData);\n          } \n        }\n      );\n    },\n    []\n  );\n\n  // set a timer to update models every second\n  useEffect(\n    () => {\n      const updateDelay = 1000;\n      const interval = setInterval( \n        () => updateModels(), \n        updateDelay\n      );\n      updateModels();\n      return () => clearInterval(interval);  \n    }, \n    [updateModels]\n  );\n  \n  // send a new model to the server\n  useEffect(\n    () => {\n      // make sure all the data required has been initialized\n      if (trainData == null || trainData.length <= 0) { return; }\n      // send request to the server\n      HttpRequestHandler.postModel(modelType, trainData, (jsonData) => {\n        setTrainData([]);\n      });\n    }, \n    [trainData, modelType]\n  );\n\n  // unselect a model if it has been deleted\n  useEffect(\n    () => {\n      if (selectedModel == null) { return; }\n      const model = models.find(\n        model => model.model_id === selectedModel.model_id\n      );\n      if (model == null) {\n        setSelectedModel(null);\n      }\n    },\n    [models, selectedModel]\n  );\n\n  // get anomalies from the server\n  useEffect(() => {\n    // make sure all the data required has been initialized\n    if (detectData.length <= 0 || selectedModel == null || selectedModel.status !== 'ready') { \n      return; \n    }\n    // send request to the server\n    HttpRequestHandler.postAnomalies(selectedModel.model_id, detectData, (jsonData) => {\n      setAnomalies(jsonData);\n    });\n  }, [detectData, selectedModel]);\n\n  // change graphUpdates to re-render the graph\n  useEffect(() => {\n    setGraphUpdates(updates => updates + 1);\n  }, [anomalies, selectedAnomalyPair]);\n\n  return (\n    <MainPage \n      models={models}\n      selectedModel={selectedModel}\n      setSelectedModel={setSelectedModel}\n      anomalies={anomalies}\n      detectData={detectData}\n      setDetectData={setDetectData}\n      setTrainData={setTrainData}\n      modelType={modelType}\n      setModelType={setModelType}\n      graphUpdates={graphUpdates}\n      selectedAnomalyPair={selectedAnomalyPair}\n      setSelectedAnomalyPair={setSelectedAnomalyPair}\n      deleteModel={deleteModel}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}